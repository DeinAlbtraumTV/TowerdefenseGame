package towerDefense;

import towerDefense.map.Tile;
import towerDefense.map.TileMap;
import towerDefense.drawing.DrawManager;
import towerDefense.drawing.ZeichenPanel;
import towerDefense.enemies.EnemyController;
import towerDefense.enemies.pathfinding.ManhattanHeuristic;
import towerDefense.enemies.pathfinding.Pathfinder;
import towerDefense.game.GameController;
import towerDefense.towers.BasicTower;
import towerDefense.towers.Tower;
import towerDefense.towers.TowerController;

import javax.swing.JOptionPane;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.Timer;
import java.util.TimerTask;

public class TowerDefenseGame extends javax.swing.JFrame {

    private Tile.TileType tileTypeDragged;
    private Tile.TileType oldTileTypeDragged;

    private static final int size_x = 13;
    private static final int size_y = 13;
    private static final int difficulty = 1;

    private static final double maxHp = 5.;

    public static final GameController gameController = new GameController(maxHp, 20, size_x, size_y, difficulty, 40);

    public static ZeichenPanel zeichenPanel;

    Pathfinder pathfinder;

    public TowerDefenseGame() {
        initComponents();

        TileMap map = gameController.getTileMap();
        EnemyController enemyController = gameController.getEnemyController();
        TowerController towerController = gameController.getTowerController();

        map.getTile(0, 0).setType(Tile.TileType.SPAWN);
        map.getTile(map.getWidth() - 1, map.getHeight() - 1).setType(Tile.TileType.CASTLE);

        pathfinder = new Pathfinder(map, new ManhattanHeuristic());

        gameController.setPathfinder(pathfinder);

        TimerTask mainLoop = new TimerTask() {
            private final int level = 0;

            @Override
            public void run() {
                enemyController.runEnemyLogic();
                towerController.runTowerLogic();

                jLabel1.setText("Wave: " + enemyController.getWave());
                jLabel2.setText("Coins: " + gameController.getCoins());
                jLabel3.setText("Enemies remaining: " + enemyController.getEnemiesRemaining());
                jLabel4.setText("HP: " + (int) gameController.getHp());

                if (gameController.getHp() <= 0) {
                    System.exit(0);
                }
            }
        };

        Timer timer = new Timer();

        timer.scheduleAtFixedRate(mainLoop, 0, 1000 / gameController.getFps());

        zeichenPanel = zeichenPanel1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        endeButton = new javax.swing.JButton();
        zeichenPanel1 = new towerDefense.drawing.ZeichenPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        endeButton.setText("Beenden");
        endeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endeButtonMouseClicked(evt);
            }
        });

        zeichenPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                zeichenPanel1MouseDragged(evt);
            }
        });
        zeichenPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zeichenPanel1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zeichenPanel1MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", Font.PLAIN, 24));
        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel1");

        jLabel3.setText("jLabel1");

        jLabel4.setFont(new java.awt.Font("Segoe UI", Font.PLAIN, 24));
        jLabel4.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(0, Short.MAX_VALUE)
                .addComponent(endeButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(zeichenPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zeichenPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 0, Short.MAX_VALUE)
                .addComponent(endeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endeButtonMouseClicked
        int antwort = JOptionPane.showConfirmDialog(null, "Wollen Sie wirklich beenden?", "BestÃ¤tigen", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (antwort == JOptionPane.YES_OPTION)
            System.exit(0);
    }//GEN-LAST:event_endeButtonMouseClicked

    private void zeichenPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zeichenPanel1MouseClicked
        if (MouseEvent.BUTTON1 == evt.getButton()) {
            int x = evt.getX();
            int y = evt.getY();

            DrawManager drawManager = gameController.getTileMap().getDrawManager();

            Tile.TileType tileType = gameController.getTileMap().getTile(x / 22, y / 22).getType();

            Tile.TileType oldTileType = tileType;

            if (tileType != Tile.TileType.WALL)
                tileType = Tile.TileType.WALL;
            else
                tileType = Tile.TileType.FLOOR;

            drawManager.drawPoint(x, y, tileType);

            Tile tile = gameController.getTileMap().getTile(x / 22, y / 22);
            if (tile.hasTower()) {
                Tower tower = tile.getTower();

                tile.setTower(null);
                gameController.getTowerController().removeTower(tower);
            }

            if (pathfinder.findPath(0, 0, gameController.getTileMap().getWidth() - 1, gameController.getTileMap().getHeight() - 1) == null && tileType != Tile.TileType.FLOOR) {
                drawManager.drawPoint(x, y, oldTileType);
            }
        } else if (MouseEvent.BUTTON3 == evt.getButton()) {
            int x = evt.getX() / 22;
            int y = evt.getY() / 22;

            if (gameController.getTileMap().getTile(x, y).getType().equals(Tile.TileType.WALL) && !gameController.getTileMap().getTile(x, y).hasTower()) {
                BasicTower tower = new BasicTower(x, y);

                if (gameController.getCoins() >= tower.getCost()) {
                    gameController.getTowerController().addTower(tower);
                    gameController.getTileMap().getTile(x, y).setTower(tower);

                    gameController.removeCoins(tower.getCost());
                }
            } else if (gameController.getTileMap().getTile(x, y).hasTower()) {
                Tower tower =  gameController.getTileMap().getTile(x, y).getTower();

                gameController.getTowerController().removeTower(tower);
                gameController.getTileMap().getTile(x, y).setTower(null);

                gameController.addCoins(tower.getCost() / 2);
            }
        }
    }//GEN-LAST:event_zeichenPanel1MouseClicked

    private void zeichenPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zeichenPanel1MouseDragged
        int x = evt.getX();
        int y = evt.getY();

        DrawManager drawManager = gameController.getTileMap().getDrawManager();

        if (gameController.getTileMap().getTile(x / 22, y / 22).hasTower() && tileTypeDragged == Tile.TileType.FLOOR) {
            Tower tower =  gameController.getTileMap().getTile(x / 22, y / 22).getTower();

            gameController.getTowerController().removeTower(tower);
            gameController.getTileMap().getTile(x, y).setTower(null);

            gameController.addCoins(tower.getCost() / 2);
        }

        drawManager.drawPoint(x, y, tileTypeDragged);

        if (pathfinder.findPath(0, 0, gameController.getTileMap().getWidth() - 1, gameController.getTileMap().getHeight() - 1) == null && tileTypeDragged != Tile.TileType.FLOOR) {
            drawManager.drawPoint(x, y, oldTileTypeDragged);
        }
    }//GEN-LAST:event_zeichenPanel1MouseDragged

    private void zeichenPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zeichenPanel1MousePressed
        if (MouseEvent.BUTTON1 == evt.getButton()) {
            int x = evt.getX();
            int y = evt.getY();

            Tile.TileType tileType = gameController.getTileMap().getTile(x / 22, y / 22).getType();

            oldTileTypeDragged = tileType;

            if (tileType != Tile.TileType.WALL)
                tileTypeDragged = Tile.TileType.WALL;
            else
                tileTypeDragged = Tile.TileType.FLOOR;
        }
    }//GEN-LAST:event_zeichenPanel1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TowerDefenseGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            TowerDefenseGame frame = new TowerDefenseGame();

            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton endeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private towerDefense.drawing.ZeichenPanel zeichenPanel1;
    // End of variables declaration//GEN-END:variables
}
